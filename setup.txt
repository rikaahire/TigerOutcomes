# Dependencies
run `pip install -r requirements.txt` in order to install necessary libraries

# How to run different things
* Run server (navigate to /Volumes/TigerOutcomes)
    * SQL/bin/pg_ctl -D data/ -l logfile start
* Remember to stop the server when you are done:
    * SQL/bin/pg_ctl -D data/ -l logfile stop
* Run Shiny app
    * Click the arrow next to the Run triangle and select "Run Shiny App"

# Preferred Setup for git
git config --global user.name [Username]  
git config --global user.email [Email]  
git config --global credential.helper store  
git config --global pull.rebase true  
git config --global rebase.autostash true  

# git commands
* git pull/push  
    * Please always pull before pushing. It’s better to solve merge conflicts locally  
* git add  
    * Don’t use this; stage in Sublime Merge instead  
* git rebase -i HEAD~[n]  
    * Allows you to edit multiple (n) previous commits  
        * This is especially useful if you have many small commits that build upon one another  
    * Can use for editing commit messages (though you can do that in Sublime Merge)  
* git status  
    * Can be used to check what your branch status is (i.e. if you are ahead/behind main)  
* git checkout -b [name]  
    * Allows you to create a branch called [name] and move to it  
* git checkout [name]  
    * Allows you to move to the branch called [name] if it exists  
* git branch -d [name]  
    * Allows you to delete a branch you no longer need  

# Tools
* VSCode  
    * Ctrl-Shift-P for command palette, search for ”Install 'code' command in PATH”  
        * This will make git merge/squash/edit attempts redirect to VSCode  
* Sublime Merge  
    * Ignore the “free trial” messages, they pop up but don’t do anything  
    * Settings -> Preferences -> Commit Messages -> Ruler, type in 50, 72  
        * This makes it so that marking lines appear at 50 and 72 characters  
* Linear  
    * Change Display to Board and open Issues tab (for full view)  

# Commits
Please follow the following format for commits  
  
[Name/Branch]: [Short, descriptive title (specifically, keep it under 50 characters)]  
[Longer description of commit]  
  
For an example, look at the second commit